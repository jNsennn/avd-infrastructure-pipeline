name: Weekly AVD Image Update

on:
  # Weekly schedule - every Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      cleanup_old_images:
        description: 'Cleanup old images after build'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PACKER_LOG: 1
  WORKING_DIR: ./packer
  PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-avd-image:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours max to stay within free tier limits
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Install Packer
      uses: hashicorp/setup-packer@main
      with:
        version: latest
    
    - name: Install Ansible and dependencies
      run: |
        # Install Ansible and required Python modules
        pip install ansible pywinrm requests
        
        # Install Ansible collections
        ansible-galaxy collection install -r ansible/requirements.yml
        
        # Verify installations
        ansible --version
        python -c "import winrm; print('pywinrm installed successfully')"
        python -c "import requests; print('requests installed successfully')"
    
    - name: Find Latest Custom Image
      id: find-image
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        # Find the latest custom image using Azure CLI
        LATEST_IMAGE=$(az image list \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --query "[?starts_with(name, 'avd-win11-')] | sort_by(@, &name) | [-1].name" \
          --output tsv)
        
        if [ -z "$LATEST_IMAGE" ]; then
          echo "No existing custom images found. This might be the first build."
          echo "latest_image=" >> $GITHUB_OUTPUT
        else
          echo "Found latest image: $LATEST_IMAGE"
          echo "latest_image=$LATEST_IMAGE" >> $GITHUB_OUTPUT
        fi
        
        # Generate new image name with timestamp
        NEW_IMAGE_NAME="avd-win11-$(date +%Y-%m-%d-%H%M%S)"
        echo "new_image_name=$NEW_IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "New image will be: $NEW_IMAGE_NAME"
    
    - name: Initialize Packer
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        packer init .
    
    - name: Validate Packer Configuration
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        # First find which build to use
        LATEST_IMAGE="${{ steps.find-image.outputs.latest_image }}"
        
        # Validate only the build we'll actually use
        if [ -n "$LATEST_IMAGE" ]; then
          echo "Validating update build configuration..."
          packer validate \
            -only="avd-update-image.azure-arm.update" \
            -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var "resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -var "managed_image_name=test-validation" \
            -var "base_image_name=$LATEST_IMAGE" \
            .
        else
          echo "Validating marketplace build configuration..."
          packer validate \
            -only="avd-marketplace-image.azure-arm.avd-image" \
            -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var "resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -var "managed_image_name=test-validation" \
            .
        fi
    
    - name: Debug Ansible Environment
      run: |
        echo "=== Ansible Configuration Debug ==="
        ansible --version
        ansible-config dump --only-changed
        echo ""
        echo "=== Python Modules ==="
        python -c "import winrm; print(f'pywinrm version: {winrm.__version__}')" || echo "pywinrm not found"
        python -c "import requests; print(f'requests version: {requests.__version__}')" || echo "requests not found"
        echo ""
        echo "=== Environment Variables ==="
        env | grep -E "(ANSIBLE|PACKER)" || echo "No Ansible/Packer env vars found"
    
    - name: Build Updated Image
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        # Determine which build to use
        if [ -n "${{ steps.find-image.outputs.latest_image }}" ]; then
          echo "Building from existing custom image: ${{ steps.find-image.outputs.latest_image }}"
          BUILD_NAME="avd-update-image.azure-arm.update"
          BASE_IMAGE_ARG="-var base_image_name=${{ steps.find-image.outputs.latest_image }}"
        else
          echo "No custom image found, building from marketplace image..."
          BUILD_NAME="avd-marketplace-image.azure-arm.avd-image"
          BASE_IMAGE_ARG=""
        fi
        
        echo "=== Starting Packer Build ==="
        echo "Build name: $BUILD_NAME"
        echo "New image name: ${{ steps.find-image.outputs.new_image_name }}"
        echo "Base image arg: $BASE_IMAGE_ARG"
        
        # Run Packer build with detailed logging
        packer build \
          -only="$BUILD_NAME" \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var "resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
          -var "managed_image_name=${{ steps.find-image.outputs.new_image_name }}" \
          $BASE_IMAGE_ARG \
          .
    
    - name: Verify Image Creation
      run: |
        # Verify the new image was created
        az image show \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --name "${{ steps.find-image.outputs.new_image_name }}" \
          --query "name" \
          --output tsv
        
        echo "‚úÖ Image ${{ steps.find-image.outputs.new_image_name }} created successfully!"
    
    - name: Cleanup Old Images
      if: ${{ github.event.inputs.cleanup_old_images == 'true' || github.event_name == 'schedule' }}
      run: |
        echo "üßπ Cleaning up old images (keeping last 4 weeks)..."
        
        # Get list of old images (older than 28 days)
        CUTOFF_DATE=$(date -d '28 days ago' +%Y-%m-%d)
        
        OLD_IMAGES=$(az image list \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --query "[?starts_with(name, 'avd-win11-') && timeCreated < '$CUTOFF_DATE'].name" \
          --output tsv)
        
        if [ -n "$OLD_IMAGES" ]; then
          echo "Found old images to delete:"
          echo "$OLD_IMAGES"
          
          # Delete old images
          for image in $OLD_IMAGES; do
            echo "Deleting $image..."
            az image delete \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --name "$image"
          done
          
          echo "‚úÖ Cleanup completed"
        else
          echo "No old images found to cleanup"
        fi
    
    - name: Upload Packer Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: packer-logs-${{ github.run_number }}
        path: |
          ${{ env.WORKING_DIR }}/*.log
          /tmp/packer*
        retention-days: 7
    
    - name: Build Summary
      if: always()
      run: |
        echo "## üñºÔ∏è AVD Image Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| New Image Name | ${{ steps.find-image.outputs.new_image_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Source Image | ${{ steps.find-image.outputs.latest_image || 'Marketplace Image' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Resource Group | ${{ secrets.AZURE_RESOURCE_GROUP }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | $(date) |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "| Next Steps | Image is ready for AVD deployment |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Next Steps | Check logs for build errors |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "- Check Packer logs in the uploaded artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Verify Azure credentials and permissions" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure WinRM connectivity is working" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Trigger Host Pool Update (Debug)
      if: success()
      run: |
        echo "üîç Debug Info:"
        echo "  Current branch: ${{ github.ref_name }}"
        echo "  Built image: ${{ steps.find-image.outputs.new_image_name }}"
        echo "  Repository: ${{ github.repository }}"
        echo ""
        
        echo "üöÄ Triggering AVD host pool update workflow..."
        
        # Use workflow_dispatch with proper branch and inputs
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/update-avd-hostpool.yml/dispatches \
          -d '{
            "ref": "${{ github.ref_name }}",
            "inputs": {
              "force_recreate": "false",
              "image_name": "${{ steps.find-image.outputs.new_image_name }}"
            }
          }')
        
        # Parse response
        http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        response_body=$(echo $response | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
        
        echo "HTTP Status: $http_code"
        if [ "$response_body" != "" ]; then
          echo "Response: $response_body"
        fi
        
        if [ $http_code -eq 204 ]; then
          echo "‚úÖ Successfully triggered AVD host pool update workflow"
          echo "   Branch: ${{ github.ref_name }}"
          echo "   Image: ${{ steps.find-image.outputs.new_image_name }}"
        else
          echo "‚ùå Failed to trigger workflow"
          echo "   This is likely a permissions issue with GITHUB_TOKEN"
          echo "   The workflow_run trigger should still work automatically"
          echo "   Consider using a PAT token or removing this step to rely on workflow_run"
          # Don't exit 1 here so we can see what happened
        fi
